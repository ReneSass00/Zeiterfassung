@using Zeiterfassung.Services
@using Zeiterfassung.Data
@using Zeiterfassung.Components.Pages
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using Zeiterfassung.Components.Dialogs
@using MudBlazor
@implements IDisposable

@inject ISnackbar Snackbar
@inject TimerStateService TimerState
@inject IDialogService DialogService
@inject IDbContextFactory<ZeiterfassungContext> DbContextFactory
@inject AuthenticationStateProvider AuthStateProvider

<CascadingValue Value="this">
    @if (TimerState.IsRunning || TimerState.IsPaused)
    {
        @* Timer started already (in pause or running) *@
        <div class="d-flex flex-column pa-4" style="height: 100%; min-height: 210px;">
            <div>
                <MudGrid Spacing="2">
                    <MudItem xs="6">
                        <MudText Typo="Typo.caption" Style="font-weight: bold">PROJEKT</MudText>
                        <MudText Typo="Typo.body2" Class="font-weight-medium">@TimerState.SelectedProjectName</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Typo="Typo.caption" Style="font-weight: bold">AUFGABE</MudText>
                        <MudText Typo="Typo.body2" Class="font-weight-medium" Style="overflow-wrap: break-word;">@TimerState.Description</MudText>
                    </MudItem>
                </MudGrid>
                <MudDivider Class="my-4" />
            </div>

            <div style="flex-grow: 1; display: flex; align-items: center; justify-content: center;">
                <MudText Typo="Typo.h3" Align="MudBlazor.Align.Center" Style="font-family: monospace; font-weight: 500;">
                    @_elapsedTime
                </MudText>
            </div>

            @* Control Buttons (Pause, Continue, Stop)*@
            <MudStack Row="true" Justify="Justify.Center" Spacing="2" Class="mb-8">
                @if (TimerState.IsRunning)
                {
                    <MudButton OnClick="PauseTimer" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Large" StartIcon="@Icons.Material.Filled.Pause">
                        Pause
                    </MudButton>
                }
                @if (TimerState.IsPaused)
                {
                    <MudButton OnClick="ResumeTimer" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Size="MudBlazor.Size.Large" StartIcon="@Icons.Material.Filled.PlayArrow">
                        Fortsetzen
                    </MudButton>
                }
                <MudButton OnClick="StopTimer" Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Large" StartIcon="@Icons.Material.Filled.Stop">
                    Stoppen
                </MudButton>
            </MudStack>
        </div>
    }
    @*Timer is cuurently not running*@
    else
    {
        @*Set Project, fill Description and start timer section*@
        <MudStack Spacing="3">
            <MudTextField @bind-Value="_description" Label="Woran arbeitest du gerade?" Variant="Variant.Outlined" Margin="Margin.Dense" />
            <MudSelect T="int?" @bind-Value="_selectedProjectId" Label="Projekt auswählen" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                @foreach (var project in _userProjects)
                {
                    <MudSelectItem Value="@((int?)project.Id)">@project.Name</MudSelectItem>
                }
            </MudSelect>
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudTooltip Text="Letzte Aktivität fortsetzen">
                    <MudIconButton Icon="@Icons.Material.Filled.History" OnClick="ResumeLastTimer" />
                </MudTooltip>
                <MudButton OnClick="StartTimer" Disabled="@(_selectedProjectId == null || string.IsNullOrWhiteSpace(_description))" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.PlayArrow" Size="MudBlazor.Size.Large">
                    Start
                </MudButton>
            </MudStack>
        </MudStack>
        <MudDivider Class="my-2" />

        @* Quick-Starts Interface*@
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.caption">Quick-Starts:</MudText>
            <MudTooltip Text="Quick-Starts verwalten">
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Size="MudBlazor.Size.Small" OnClick="@(() => OpenQuickStartDialog())" />
            </MudTooltip>
        </MudStack>
        <MudStack Row="true" Spacing="2">
            @foreach (var template in _quickStarts)
            {
                <MudButton Variant="Variant.Outlined" Size="MudBlazor.Size.Small" OnClick="@(() => ApplyQuickStart(template))">@template.Name</MudButton>
            }
        </MudStack>
    }
</CascadingValue>

@code {
    [Parameter] public EventCallback OnTimeEntryCreated { get; set; }

    private List<Project> _userProjects = new();
    private int? _selectedProjectId;
    private string _elapsedTime = "00:00:00";
    private System.Threading.Timer? _uiTimer;
    private string? _userId;
    private string _description = "";
    private List<QuickStartTemplate> _quickStarts = new();

    protected override async Task OnInitializedAsync()
    {
        TimerState.OnChange += OnTimerStateChanged;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (_userId is not null)
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            _userProjects = await dbContext.Projects
                .Where(p => p.OwnerId == _userId || p.ProjectUsers.Any(tm => tm.UserId == _userId))
                .OrderBy(p => p.Name)
                .AsNoTracking()
                .ToListAsync();
        }
        await LoadQuickStartsAsync();
    }

    private void OnTimerStateChanged()
    {
        InvokeAsync(() =>
        {
            var elapsed = TimerState.GetElapsedTime();
            _elapsedTime = elapsed.ToString(@"hh\:mm\:ss");

            if (TimerState.IsRunning && _uiTimer == null)
            {
                _uiTimer = new System.Threading.Timer(_ =>
                {
                    elapsed = TimerState.GetElapsedTime();
                    _elapsedTime = elapsed.ToString(@"hh\:mm\:ss");
                    InvokeAsync(StateHasChanged);
                }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
            }
            else if (!TimerState.IsRunning)
            {
                _uiTimer?.Dispose();
                _uiTimer = null;
            }

            StateHasChanged();
        });
    }

    private void StartTimer()
    {
        if (_selectedProjectId.HasValue)
        {
            var project = _userProjects.FirstOrDefault(p => p.Id == _selectedProjectId.Value);
            if (project != null)
            {
                TimerState.StartTimer(project.Id, project.Name, _description);
            }
        }
    }

    private void PauseTimer() => TimerState.PauseTimer();
    private void ResumeTimer() => TimerState.ResumeTimer();

    private async Task StopTimer()
    {
        var (startTime, endTime, projectId, description) = TimerState.StopTimer();
        if (startTime.HasValue && projectId.HasValue)
        {
            var parameters = new DialogParameters<CreateTimeEntryDialog>
            {
                { x => x.PreselectedProjectId, projectId.Value },
                { x => x.PreselectedStartTime, startTime.Value },
                { x => x.PreselectedEndTime, endTime.Value },
                { x => x.PreselectedDescription, description }
            };

            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.Small, 
                    FullWidth = true           
                };

            var dialog = await DialogService.ShowAsync<CreateTimeEntryDialog>("Zeiteintrag erstellen", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnTimeEntryCreated.InvokeAsync();
            }
        }
    }

    private async Task ResumeLastTimer()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var lastEntry = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId)
            .OrderByDescending(te => te.EndTime)
            .FirstOrDefaultAsync();
        if (lastEntry != null)
        {
            _selectedProjectId = lastEntry.ProjectId;
            _description = lastEntry.Description;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Keine letzte Aktivität gefunden.", Severity.Info);
        }
    }

    private async Task LoadQuickStartsAsync()
    {
        if (_userId is not null)
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            _quickStarts = await dbContext.QuickStartTemplates
                .Where(q => q.UserId == _userId)
                .OrderBy(q => q.Name)
                .AsNoTracking()
                .ToListAsync();
        }
    }

    private void ApplyQuickStart(QuickStartTemplate template)
    {
        _selectedProjectId = template.ProjectId;
        _description = template.Description;
        StartTimer();
    }

    private async Task OpenQuickStartDialog()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
            };

        var dialog = DialogService.Show<QuickStartConfigDialog>("Quick-Starts verwalten", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadQuickStartsAsync();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        TimerState.OnChange -= OnTimerStateChanged;
        _uiTimer?.Dispose();
    }
}