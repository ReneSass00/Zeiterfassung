@page "/dashboard"
@page "/"
@attribute [Authorize]

@using Zeiterfassung.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using Zeiterfassung.Components.Layout
@using ApexCharts
@using Blazor_ApexCharts

@inject IDbContextFactory<ZeiterfassungContext> DbContextFactory
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4">Willkommen zurück!</MudText>

    @* --- REIHE 1: KPI-KARTEN --- *@
    <MudGrid Spacing="4" Class="mb-6">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="card-hover-effect" Height="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Heutige Zeit</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudAvatar Color="MudBlazor.Color.Primary" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Color="MudBlazor.Color.Inherit" />
                        </MudAvatar>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h4">@_todaysHours.ToString("F1")h</MudText>
                    <MudText Typo="Typo.body2" Class="@(_isTodayBetter ? "mud-text-success" : "mud-text-error")">
                        @_todayVsYesterdayDiff.ToString("F0")% vs. Gestern
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="card-hover-effect" Height="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Wochenziel</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudAvatar Color="MudBlazor.Color.Secondary" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Color="MudBlazor.Color.Inherit" />
                        </MudAvatar>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@_currentWeekHours.ToString("F1")h / @_weeklyGoalHours.ToString("F0")h</MudText>
                    <MudProgressLinear Color="MudBlazor.Color.Primary" Value="@_weeklyProgress" Class="my-2"></MudProgressLinear>
                    <MudText Typo="Typo.body2">@_weeklyProgress.ToString("F0")% erreicht</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="card-hover-effect" Height="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Aktive Tage</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudAvatar Color="MudBlazor.Color.Primary" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="MudBlazor.Color.Inherit" />
                        </MudAvatar>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h4">@_activeDaysInMonth / @DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month)</MudText>
                    <MudText Typo="Typo.body2">Tage in diesem Monat</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2" Class="card-hover-effect" Height="100%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Ø Stunden / Tag</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudAvatar Color="MudBlazor.Color.Secondary" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="MudBlazor.Color.Inherit" />
                        </MudAvatar>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h4">@_avgHoursPerDay.ToString("F1")h</MudText>
                    <MudText Typo="Typo.body2">Durchschnitt der letzten 30 Tage</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    @* --- REIHE 2: LIVE-TIMER UND CHARTS --- *@
    <MudGrid Spacing="4" Class="mb-6">
        @* LINKE SPALTE: LIVE-TIMER *@
        <MudItem xs="12" lg="4">
            <MudPaper Elevation="2" Class="pa-4 card-hover-effect-subtle" Height="100%">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Filled.AvTimer" Class="mr-2" Color="MudBlazor.Color.Primary" />
                    <MudText Typo="Typo.h6">Live-Zeiterfassung</MudText>
                </MudStack>
                <LiveTimer OnTimeEntryCreated="LoadAllDashboardData" />
            </MudPaper>
        </MudItem>
        @* RECHTE SPALTE: CHARTS *@
        <MudItem xs="12" lg="8">
            <MudGrid Spacing="4">
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4 card-hover-effect-subtle">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="mr-2" Color="MudBlazor.Color.Primary" />
                            <MudText Typo="Typo.h6">Zeitverteilung</MudText>
                            <MudSpacer />
                            <MudMenu Label="@_selectedDateRangeLabel" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" EndIcon="@Icons.Material.Filled.ArrowDropDown" Size="MudBlazor.Size.Small">
                                <MudMenuItem OnClick="@(() => OnDateRangeChangedAsync(DateRangeOptions.ThisMonth))">Dieser Monat</MudMenuItem>
                                <MudMenuItem OnClick="@(() => OnDateRangeChangedAsync(DateRangeOptions.LastMonth))">Letzter Monat</MudMenuItem>
                                <MudMenuItem OnClick="@(() => OnDateRangeChangedAsync(DateRangeOptions.Last90Days))">Letzte 90 Tage</MudMenuItem>
                                <MudMenuItem OnClick="@(() => OnDateRangeChangedAsync(DateRangeOptions.ThisYear))">Dieses Jahr</MudMenuItem>
                                <MudMenuItem OnClick="@(() => OnDateRangeChangedAsync(DateRangeOptions.AllTime))">Gesamt</MudMenuItem>
                            </MudMenu>
                        </MudStack>
                        @if (_projectDistributionData.Any())
                        {
                            <ApexChart @key="_projectDistributionChartKey" @ref="_projectDistributionChart" TItem="ChartDataPoint" Options="_projectDistributionChartOptions">
                                <ApexPointSeries TItem="ChartDataPoint"
                                Items="_projectDistributionData"
                                SeriesType="SeriesType.Bar"
                                Name="Stunden"
                                XValue="e => e.X"
                                YValue="e => e.Y" />
                            </ApexChart>
                        }
                        else
                        {
                            <MudText>Keine Daten vorhanden.</MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4 card-hover-effect-subtle" Height="100%">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="mr-2" Color="MudBlazor.Color.Primary" />
                            <MudText Typo="Typo.h6">Stunden pro Tag (Letzte 7 Tage)</MudText>
                        </MudStack>
                        @if (_barChartData.Any())
                        {
                            <ApexChart TItem="ChartDataPoint" Options="_barChartOptions">
                                <ApexPointSeries TItem="ChartDataPoint"
                                Items="_barChartData"
                                Name="Erfasste Stunden"
                                SeriesType="SeriesType.Bar"
                                Color="#7B68EE"
                                XValue="e => e.X"
                                YValue="e => e.Y" />
                            </ApexChart>

                        }
                        else
                        {
                            <MudText>Keine Daten vorhanden.</MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>

    @* --- REIHE 3: LETZTE AKTIVITÄTEN --- *@
    <MudPaper Class="pa-4 mt-6 card-hover-effect-subtle">
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
            <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2" Color="MudBlazor.Color.Primary" />
            <MudText Typo="Typo.h5">Letzte Aktivitäten</MudText>
        </MudStack>
        <MudList T="TimeEntry">
            @if (!_recentActivities.Any())
            {
                <MudListItem Text="Noch keine Aktivitäten vorhanden." />
            }
            @foreach (var entry in _recentActivities)
            {
                <MudListItem>
                    <div class="d-flex align-center" style="width: 100%">
                        <div>
                            <MudText Typo="Typo.body1">@entry.Description</MudText>
                            <MudText Typo="Typo.caption" Color="MudBlazor.Color.Dark">@entry.Project.Name • @FormatRelativeTime(entry.EndTime)</MudText>
                        </div>
                        <MudSpacer />
                        <div class="text-right">
                            <MudText Typo="Typo.body1" Class="font-weight-bold">@FormatDuration(entry.EndTime - entry.StartTime)</MudText>
                            <MudChip Variant="Variant.Outlined" Color="MudBlazor.Color.Success" Size="MudBlazor.Size.Small" Class="mt-1">abgeschlossen</MudChip>
                        </div>
                    </div>
                </MudListItem>
            }
        </MudList>
    </MudPaper>

</MudContainer>

@code {

    public class ChartDataPoint
    {
        public string X { get; set; } // Wert für die X-Achse (Label)
        public decimal Y { get; set; } // Wert für die Y-Achse (Datenpunkt)
    }

    private ApexChart<ChartDataPoint>? _donutChart;
    private ApexChart<ChartDataPoint>? _projectDistributionChart;
    private List<ChartDataPoint> _projectDistributionData = [];
    private Guid _projectDistributionChartKey = Guid.NewGuid(); 
    private List<ChartDataPoint> _barChartData = new();
    private decimal _yAxisMax = 8;
    private ClaimsPrincipal? _user;
    private string? _userId;

    private double _todaysHours;
    private double _todayVsYesterdayDiff;
    private bool _isTodayBetter;
    private double _currentWeekHours;
    private readonly double _weeklyGoalHours = 40.0; // Kann man später in den User-Settings speichern
    private double _weeklyProgress;
    private int _activeDaysInMonth;
    private double _avgHoursPerDay;

    private List<TimeEntry> _recentActivities = new();

    private string _selectedDateRangeLabel = "Dieser Monat";

    private ApexChartOptions<ChartDataPoint> _barChartOptions = new()
        {
            Chart = new Chart
            {
                Toolbar = new Toolbar { Show = false }
            },
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    //round corners
                    BorderRadius = 8, 
                    ColumnWidth = "60%"
                }
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels { Style = new AxisLabelStyle { CssClass = "apexcharts-xaxis-label" } }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = "(value) => { return value.toFixed(0) + 'h'; }"
                    }
                }
            }
        };

    private ApexChartOptions<ChartDataPoint> _projectDistributionChartOptions = new()
        {
            Chart = new Chart { Toolbar = new Toolbar { Show = false } },
            PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    Horizontal = true, 
                    BorderRadius = 4,
                    DataLabels = new PlotOptionsBarDataLabels { Position = BarDataLabelPosition.Top }
                }
            },
            Colors = new() { "#7B68EE" },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels { Formatter = "(value) => { return value.toFixed(1) + 'h'; }" }
            },
            Tooltip = new Tooltip { Y = new TooltipY { Title = new TooltipYTitle { Formatter = "(seriesName) => \"Stunden\"" } } }
        };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
        _userId = _user.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadAllDashboardData();
    }

    private async Task LoadAllDashboardData()
    {
        await LoadBarChartData();
        await LoadDashboardMetricsAsync();
        await OnDateRangeChangedAsync(DateRangeOptions.ThisMonth); // Standard-Filter beim Start
        await LoadRecentActivitiesAsync();
        StateHasChanged();
    }

    private async Task LoadRecentActivitiesAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        if (_userId is null) return;

        _recentActivities = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId)
            .OrderByDescending(te => te.EndTime)
            .Take(5)
            .Include(te => te.Project)
            .ToListAsync();
    }

    private async Task LoadDashboardMetricsAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        if (_userId is null) return;

        var today = DateTime.UtcNow.Date;
        var yesterday = today.AddDays(-1);
        var startOfMonth = new DateTime(today.Year, today.Month, 1);
        var startOfLast30Days = today.AddDays(-30);

        var entries = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId && te.StartTime >= startOfLast30Days)
            .Select(te => new { te.StartTime, te.EndTime })
            .ToListAsync();

        _todaysHours = entries
            .Where(te => te.StartTime.Date == today)
            .Sum(te => (te.EndTime - te.StartTime).TotalHours);

        var yesterdayHours = entries
            .Where(te => te.StartTime.Date == yesterday)
            .Sum(te => (te.EndTime - te.StartTime).TotalHours);

        if (yesterdayHours > 0)
        {
            _todayVsYesterdayDiff = ((_todaysHours / yesterdayHours) - 1) * 100;
            _isTodayBetter = _todaysHours >= yesterdayHours;
        }

        var startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
        var entriesForWeek = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId && te.StartTime >= startOfWeek)
            .ToListAsync();
        _currentWeekHours = entriesForWeek.Sum(te => (te.EndTime - te.StartTime).TotalHours);
        _weeklyProgress = (_currentWeekHours / _weeklyGoalHours) * 100;

        _activeDaysInMonth = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId && te.StartTime >= startOfMonth)
            .Select(te => te.StartTime.Date)
            .Distinct()
            .CountAsync();

        var totalHoursLast30Days = entries.Sum(te => (te.EndTime - te.StartTime).TotalHours);
        var activeDaysLast30Days = entries.Select(te => te.StartTime.Date).Distinct().Count();
        _avgHoursPerDay = activeDaysLast30Days > 0 ? totalHoursLast30Days / activeDaysLast30Days : 0;
    }

    private async Task OnDateRangeChangedAsync(DateRangeOptions option)
    {
        var today = DateTime.UtcNow.Date;
        DateTime fromDate;

        switch (option)
        {
            case DateRangeOptions.ThisMonth:
                fromDate = new DateTime(today.Year, today.Month, 1);
                _selectedDateRangeLabel = "Dieser Monat";
                break;
            case DateRangeOptions.LastMonth:
                var lastMonth = today.AddMonths(-1);
                fromDate = new DateTime(lastMonth.Year, lastMonth.Month, 1);
                _selectedDateRangeLabel = "Letzter Monat";
                break;
            case DateRangeOptions.Last90Days:
                fromDate = today.AddDays(-90);
                _selectedDateRangeLabel = "Letzte 90 Tage";
                break;
            case DateRangeOptions.ThisYear:
                fromDate = new DateTime(today.Year, 1, 1);
                _selectedDateRangeLabel = "Dieses Jahr";
                break;
            case DateRangeOptions.AllTime:
            default:
                fromDate = DateTime.MinValue;
                _selectedDateRangeLabel = "Gesamt";
                break;
        }

        _projectDistributionData = await LoadProjectDistributionDataAsync(fromDate);
        _projectDistributionChartKey = Guid.NewGuid();
        StateHasChanged();

    }

    private async Task<List<ChartDataPoint>> LoadProjectDistributionDataAsync(DateTime fromDate)
    {
        if (_userId is null) return new List<ChartDataPoint>();
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        var timeEntriesData = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId && te.StartTime >= fromDate)
            .Select(te => new { ProjectName = te.Project.Name, te.StartTime, te.EndTime })
            .ToListAsync();

        var projectTimes = timeEntriesData
            .GroupBy(te => te.ProjectName)
            .Select(g => new { ProjectName = g.Key, TotalHours = g.Sum(te => (te.EndTime - te.StartTime).TotalHours) })
            .Where(x => x.TotalHours > 0) 
            .OrderByDescending(x => x.TotalHours)
            .ToList();

        return projectTimes.Select(pt => new ChartDataPoint
            {
                X = pt.ProjectName,
                Y = Convert.ToDecimal(Math.Round(pt.TotalHours, 2))
            }).ToList();
    }
    private async Task LoadBarChartData()
    {
        if (_userId is null) return;
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        var fromDate = DateTime.UtcNow.Date.AddDays(-6);
        var timeEntriesData = await dbContext.TimeEntries
            .Where(te => te.UserId == _userId && te.StartTime >= fromDate)
            .Select(te => new { te.StartTime, te.EndTime })
            .ToListAsync();

        var dailyHours = timeEntriesData
            .GroupBy(te => te.StartTime.Date)
            .ToDictionary(g => g.Key, g => g.Sum(te => (te.EndTime - te.StartTime).TotalHours));

        var last7Days = Enumerable.Range(0, 7).Select(i => DateTime.UtcNow.Date.AddDays(-i));
        var tempData = new List<ChartDataPoint>();
        foreach (var day in last7Days.OrderBy(d => d))
        {
            tempData.Add(new ChartDataPoint
                {
                    X = day.ToLocalTime().ToString("ddd"),
                    Y = Convert.ToDecimal(dailyHours.TryGetValue(day, out var hours) ? Math.Round(hours, 2) : 0)
                });
        }
        _barChartData = tempData;

        var maxHours = _barChartData.Any() ? _barChartData.Max(d => d.Y) : 8;
        if (maxHours < 8) maxHours = 8;
        _yAxisMax = Convert.ToDecimal(Math.Ceiling(maxHours / 2) * 2);
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
        {
            return $"{(int)duration.TotalHours}h {duration.Minutes}m";
        }
        return $"{duration.Minutes}m {duration.Seconds}s";
    }

    private string FormatRelativeTime(DateTime utcTime)
    {
        var localTime = utcTime.ToLocalTime();
        var localNow = DateTime.Now;
        var diff = localNow - localTime;

        if (localTime.Date == localNow.Date)
        {
            if (diff.TotalMinutes < 1) return "gerade eben";
            if (diff.TotalMinutes < 60) return $"vor {(int)diff.TotalMinutes} Minuten";
            return $"vor {(int)diff.TotalHours} Stunden";
        }
        if (localTime.Date == localNow.Date.AddDays(-1))
        {
            return "Gestern";
        }
        return localTime.ToString("dd. MMM yyyy");
    }

    public enum DateRangeOptions
    {
        ThisMonth,
        LastMonth,
        Last90Days,
        ThisYear,
        AllTime
    }
}