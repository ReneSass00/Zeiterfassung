@page "/projects"
@attribute [Authorize]
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Zeiterfassung.Data
@using Zeiterfassung.Components.Dialogs

@inject IDbContextFactory<ZeiterfassungContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Projects> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Meine Projekte</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Meine Projekte</MudText>
<MudText Class="mb-4">Hier siehst du alle Projekte, die du erstellt hast oder in denen du Mitglied bist.</MudText>

<MudTable T="Project" ServerData="@ServerReload" Dense="true" Hover="true" @ref="table" Fi
          RowClassFunc="@((project, i) => project.OwnerId == currentUserId ? "owned-project" : string.Empty)">

    <ToolBarContent>
        <MudTextField T="string"
                      ValueChanged="@(s => { _searchString = s; table.ReloadServerData(); })"
                      Placeholder="Projekte durchsuchen..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="MudBlazor.Size.Medium"
                      Class="mt-0"
                      Style="width: 300px"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="@(async () => await table.ReloadServerData())" />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="OpenCreateProjectDialog">Neues Projekt</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Name" T="Project">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Beschreibung" T="Project">Beschreibung</MudTableSortLabel></MudTh>
        <MudTh Style="text-align:right">Aktionen</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
        <MudTd DataLabel="Leitung">@context.User.NormalizedUserName</MudTd>
        <MudTd DataLabel="Aktionen" Style="text-align:right">
            @if (context.OwnerId == currentUserId)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Group" Variant="Variant.Filled" Color="MudBlazor.Color.Default" Size="MudBlazor.Size.Small" OnClick="@(() => OpenManageMembersDialog(context.Id))" Title="Mitglieder verwalten" />
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" OnClick="@(() => OpenEditProjectDialog(context))" Class="ml-2" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" OnClick="@(() => DeleteProject(context))" Class="ml-2" />
            }
            else
            {
                <MudTooltip Text="Sie sind nur Mitglied dieses Projekts">
                    <MudChip T="object" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Secondary">Mitglied</MudChip>
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Keine Aktionen vorhanden. Sie sind kein Projektleiter.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    private MudTable<Project> table;
    private string? currentUserId;
    private string _searchString = "";


    DialogOptions options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private async Task<TableData<Project>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            if (string.IsNullOrEmpty(currentUserId))
            {
                return new TableData<Project>() { TotalItems = 0, Items = new List<Project>() };
            }

            await using var context = await DbFactory.CreateDbContextAsync(token);

            var query = context.Projects
                               .Include(p => p.User)
                               .Include(p => p.ProjectUsers)
                               .Where(p => p.OwnerId == currentUserId || p.ProjectUsers.Any(pu => pu.UserId == currentUserId))
                               .AsNoTracking();

            // Filtering if search string is provided
            if (!string.IsNullOrWhiteSpace(_searchString))
            {
                query = query.Where(p =>
                    p.Name.Contains(_searchString) ||
                    (p.Description != null && p.Description.Contains(_searchString))
                );
            }


            switch (state.SortLabel)
            {
                case "Name":
                    query = query.OrderByDirection(state.SortDirection, p => p.Name);
                    break;
                case "Beschreibung":
                    query = query.OrderByDirection(state.SortDirection, p => p.Description);
                    break;
                case "Leitung":
                    query = query.OrderByDirection(state.SortDirection, p => p.User.NormalizedUserName);
                    break;
                default:
                    break;
            }


            var totalItems = await query.CountAsync(token);
            var items = await query.Skip(state.Page * state.PageSize)
                                   .Take(state.PageSize)
                                   .ToListAsync(token);

            return new TableData<Project>() { TotalItems = totalItems, Items = items };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load projects for user {UserId}", currentUserId);
            return new TableData<Project>() { TotalItems = 0, Items = new List<Project>() };
        }
    }

    private async Task OpenManageMembersDialog(int projectId)
    {
        var parameters = new DialogParameters<ManageProjectMembersDialog> { { x => x.ProjectId, projectId } };
        var dialog = DialogService.Show<ManageProjectMembersDialog>("Mitglieder verwalten", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await table.ReloadServerData();
            StateHasChanged();
        }
    }

    private async Task OpenCreateProjectDialog()
    {
        var dialog = DialogService.Show<CreateProjectDialog>("Neues Projekt erstellen", options);
        var result = await dialog.Result;


        if (!result.Canceled && result.Data is Project newProject)
        {
            try
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                newProject.OwnerId = currentUserId!;
                newProject.ProjectUsers = new List<ProjectUser>
                {
                    new ProjectUser { UserId = currentUserId!, Role = ProjectUser.RoleManager }
                };

                context.Projects.Add(newProject);
                await context.SaveChangesAsync();
                Snackbar.Add("Projekt erfolgreich erstellt.", Severity.Success);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to save new project for user {UserId}", currentUserId);
                Snackbar.Add("Fehler beim Speichern des Projekts.", Severity.Error);
            }
        }
    }

    private async Task OpenEditProjectDialog(Project projectToEdit)
    {
        var parameters = new DialogParameters<CreateProjectDialog> { { x => x.ProjectToEdit, projectToEdit } };
        var dialog = DialogService.Show<CreateProjectDialog>("Projekt bearbeiten", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Project updatedProject)
        {
            try
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                var projectFromDb = await context.Projects.FindAsync(updatedProject.Id);
                if (projectFromDb is not null)
                {
                    projectFromDb.Name = updatedProject.Name;
                    projectFromDb.Description = updatedProject.Description;

                    await context.SaveChangesAsync();
                    Snackbar.Add("Projekt erfolgreich aktualisiert.", Severity.Success);
                }
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to update project {ProjectId} for user {UserId}", updatedProject.Id, currentUserId);
                Snackbar.Add("Fehler beim Aktualisieren des Projekts.", Severity.Error);
            }
        }
    }

    private async Task DeleteProject(Project projectToDelete)
    {
        var result = await DialogService.ShowMessageBox(
            "Löschen bestätigen",
            $"Mötest du das Projekt '{projectToDelete.Name}' wirklich löschen? Alle zugehörigen Zeiteinträge und Mitgliedschaften werden ebenfalls gelöscht.",
            yesText: "Löschen!", cancelText: "Abbrechen");

        if (result == true)
        {
            try
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                var projectWithIncludes = await context.Projects
                    .Include(p => p.ProjectUsers)
                    .Include(p => p.TimeEntries)
                    .FirstOrDefaultAsync(p => p.Id == projectToDelete.Id);

                if (projectWithIncludes is not null)
                {
                    context.Projects.Remove(projectWithIncludes);
                    await context.SaveChangesAsync();
                    Snackbar.Add("Projekt gelöscht.", Severity.Info);
                    await table.ReloadServerData();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to delete project {ProjectId} for user {UserId}", projectToDelete.Id, currentUserId);
                Snackbar.Add("Fehler beim Löschen des Projekts.", Severity.Error);
            }
        }
    }
}