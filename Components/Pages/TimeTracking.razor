@page "/time-tracking"
@attribute [Authorize]
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Zeiterfassung.Data
@using Zeiterfassung.Components.Dialogs

@inject IDbContextFactory<ZeiterfassungContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<TimeTracking> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Zeiterfassung</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Meine Zeiteinträge</MudText>

<MudTable T="TimeEntry" ServerData="@ServerReloadEntries" Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateTimeEntryDialog">Neuer Eintrag</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Projekt</MudTh>
        <MudTh>Beschreibung</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>Ende</MudTh>
        <MudTh>Dauer</MudTh>
        <MudTh Style="text-align:right">Aktionen</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Projekt">@context.Project.Name</MudTd>
        <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
        <MudTd DataLabel="Start">@context.StartTime.ToString("g")</MudTd>
        <MudTd DataLabel="Ende">@context.EndTime.ToString("g")</MudTd>
        <MudTd DataLabel="Dauer">@((context.EndTime - context.StartTime).ToString(@"hh\:mm"))</MudTd>
        <MudTd DataLabel="Aktionen" Style="text-align:right">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => OpenEditTimeEntryDialog(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteTimeEntry(context))" Class="ml-2" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Keine Einträge gefunden.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </LoadingContent>
</MudTable>

@code {
    private MudTable<TimeEntry> table;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task<TableData<TimeEntry>> ServerReloadEntries(TableState state, CancellationToken token)
    {
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync(token);
            var query = context.TimeEntries
                               .Include(te => te.Project)
                               .Where(te => te.UserId == currentUserId);

            var totalItems = await query.CountAsync(token);
            var items = await query.OrderByDescending(te => te.StartTime)
                                   .Skip(state.Page * state.PageSize)
                                   .Take(state.PageSize)
                                   .ToListAsync(token);
            return new TableData<TimeEntry>() { TotalItems = totalItems, Items = items };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load time entries for user {UserId}", currentUserId);
            return new TableData<TimeEntry>() { TotalItems = 0, Items = new List<TimeEntry>() };
        }
    }

    private async Task OpenCreateTimeEntryDialog()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        var userProjects = await context.Projects.Where(p => p.OwnerId == currentUserId).OrderBy(p => p.Name).ToListAsync();

        //var parameters = new DialogParameters<CreateTimeEntryDialog> { { x => x.UserProjects, userProjects } };
        var dialog = DialogService.Show<CreateTimeEntryDialog>("Neuer Zeiteintrag");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TimeEntry newTimeEntry)
        {
            newTimeEntry.UserId = currentUserId!;
            context.TimeEntries.Add(newTimeEntry);
            await context.SaveChangesAsync();
            Snackbar.Add("Eintrag erfolgreich erstellt.", Severity.Success);
            await table.ReloadServerData();
        }
    }

    private async Task OpenEditTimeEntryDialog(TimeEntry entryToEdit)
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        var userProjects = await context.Projects.Where(p => p.OwnerId == currentUserId).OrderBy(p => p.Name).ToListAsync();

        // var parameters = new DialogParameters<CreateTimeEntryDialog>
        // {
        //     { x => x.UserProjects, userProjects },
        //     { x => x.EntryToEdit, entryToEdit }
        // };
        var dialog = DialogService.Show<CreateTimeEntryDialog>("Zeiteintrag bearbeiten");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TimeEntry updatedEntry)
        {
            // === KORRIGIERTER TEIL ===
            var entryFromDb = await context.TimeEntries.FindAsync(updatedEntry.Id);
            if (entryFromDb is not null)
            {
                entryFromDb.ProjectId = updatedEntry.ProjectId;
                entryFromDb.Description = updatedEntry.Description;
                entryFromDb.StartTime = updatedEntry.StartTime;
                entryFromDb.EndTime = updatedEntry.EndTime;

                await context.SaveChangesAsync();
                Snackbar.Add("Eintrag erfolgreich aktualisiert.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Fehler: Eintrag konnte nicht in der Datenbank gefunden werden.", Severity.Error);
            }
            // === ENDE KORRIGIERTER TEIL ===

            await table.ReloadServerData();
        }
    }

    private async Task DeleteTimeEntry(TimeEntry entryToDelete)
    {
        var result = await DialogService.ShowMessageBox(
            "Löschen bestätigen",
            $"Möchtest du den Zeiteintrag '{entryToDelete.Description}' wirklich löschen?",
            yesText: "Löschen!", cancelText: "Abbrechen");

        if (result == true)
        {
            try
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                context.TimeEntries.Remove(entryToDelete);
                await context.SaveChangesAsync();
                Snackbar.Add("Eintrag gelöscht.", Severity.Info);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fehler beim Löschen des Zeiteintrags {TimeEntryId}", entryToDelete.Id);
                Snackbar.Add("Fehler beim Löschen des Eintrags.", Severity.Error);
            }
        }
    }
}