@page "/time-tracking"
@attribute [Authorize]
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Zeiterfassung.Data
@using Zeiterfassung.Components.Dialogs

@inject IDbContextFactory<ZeiterfassungContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<TimeTracking> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Zeiterfassung</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Meine Zeiteinträge</MudText>

<MudTable T="TimeEntry" ServerData="@ServerReloadEntries" Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudTextField T="string"
                      @bind-Value="_searchString"
                      Placeholder="Einträge durchsuchen..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="MudBlazor.Size.Medium"
                      Class="mt-0"
                      Style="width: 300px;"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="@(async () => await table.ReloadServerData())" />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="OpenCreateTimeEntryDialog">Neuer Eintrag</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Projekt" T="TimeEntry">Projekt</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Beschreibung" T="TimeEntry">Beschreibung</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Start" T="TimeEntry" InitialDirection="SortDirection.Descending">Start</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Ende" T="TimeEntry">Ende</MudTableSortLabel></MudTh>
        <MudTh>Dauer</MudTh>
        <MudTh Style="text-align:right">Aktionen</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Projekt">@context.Project.Name</MudTd>
        <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
        <MudTd DataLabel="Start">@context.StartTime.ToLocalTime().ToString("g")</MudTd>
        <MudTd DataLabel="Ende">@context.EndTime.ToLocalTime().ToString("g")</MudTd>
        <MudTd DataLabel="Dauer">@((context.EndTime - context.StartTime).ToString(@"hh\:mm"))</MudTd>
        <MudTd DataLabel="Aktionen" Style="text-align:right">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" OnClick="@(() => OpenEditTimeEntryDialog(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" OnClick="@(() => DeleteTimeEntry(context))" Class="ml-2" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Keine Einträge gefunden.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    private MudTable<TimeEntry> table = default!;
    private string? currentUserId;
    private string _searchString = ""; 

    DialogOptions options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task<TableData<TimeEntry>> ServerReloadEntries(TableState state, CancellationToken token)
    {
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync(token);
            var query = context.TimeEntries
                               .Include(te => te.Project)
                               .Where(te => te.UserId == currentUserId)
                               .AsNoTracking();

            if (!string.IsNullOrWhiteSpace(_searchString))
            {
                query = query.Where(te =>
                    te.Description.Contains(_searchString) ||
                    te.Project.Name.Contains(_searchString)
                );
            }

            switch (state.SortLabel)
            {
                case "Projekt":
                    query = query.OrderByDirection(state.SortDirection, p => p.Project.Name);
                    break;
                case "Beschreibung":
                    query = query.OrderByDirection(state.SortDirection, p => p.Description);
                    break;
                case "Start":
                    query = query.OrderByDirection(state.SortDirection, p => p.StartTime);
                    break;
                case "Ende":
                    query = query.OrderByDirection(state.SortDirection, p => p.EndTime);
                    break;
                default:
                    query = query.OrderByDescending(te => te.StartTime);
                    break;
            }

            var totalItems = await query.CountAsync(token);
            var items = await query.Skip(state.Page * state.PageSize)
                                   .Take(state.PageSize)
                                   .ToListAsync(token);

            return new TableData<TimeEntry>() { TotalItems = totalItems, Items = items };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load time entries for user {UserId}", currentUserId);
            return new TableData<TimeEntry>() { TotalItems = 0, Items = new List<TimeEntry>() };
        }
    }
    private async Task OpenCreateTimeEntryDialog()
    {
        var dialog = DialogService.Show<CreateTimeEntryDialog>("Neuer Zeiteintrag", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task OpenEditTimeEntryDialog(TimeEntry entryToEdit)
    {
        var parameters = new DialogParameters<CreateTimeEntryDialog>
        {
            { x => x.EntryToEdit, entryToEdit }
        };
        var dialog = DialogService.Show<CreateTimeEntryDialog>("Zeiteintrag bearbeiten", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task DeleteTimeEntry(TimeEntry entryToDelete)
    {
        var result = await DialogService.ShowMessageBox(
            "Löschen bestätigen",
            $"Möchtest du den Zeiteintrag '{entryToDelete.Description}' wirklich löschen?",
            yesText: "Löschen!", cancelText: "Abbrechen");

        if (result == true)
        {
            try
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                context.TimeEntries.Remove(entryToDelete);
                await context.SaveChangesAsync();
                Snackbar.Add("Eintrag gelöscht.", Severity.Info);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fehler beim Löschen des Zeiteintrags {TimeEntryId}", entryToDelete.Id);
                Snackbar.Add("Fehler beim Löschen des Eintrags.", Severity.Error);
            }
        }
    }
}