@using Microsoft.EntityFrameworkCore
@using Zeiterfassung.Data

@inject IDbContextFactory<ZeiterfassungContext> DbFactory
@inject ILogger<ManageProjectMembersDialog> Logger
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Mitglieder für Projekt verwalten</MudText>
    </TitleContent>
    <DialogContent>
        @if (project is null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <MudText Typo="Typo.h6" GutterBottom="true">@project.Name</MudText>

            <MudText Class="mt-4 mb-2"><b>Aktuelle Mitglieder</b></MudText>
            <MudList Clickable="false" T="ProjectUser">
                @foreach (var member in project.ProjectUsers.OrderBy(u => u.User.UserName))
                {
                    <MudListItem>
                        <div class="d-flex align-center" style="width: 100%;">

                            <div>
                                @member.User.UserName
                                @if (member.UserId == project.OwnerId)
                                {
                                    <MudChip Size="MudBlazor.Size.Small" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Class="ml-2">Leiter</MudChip>
                                }
                            </div>

                            <MudSpacer />

                            <div>
                                @if (member.UserId != project.OwnerId)
                                {
                                    <MudTooltip Text="Leitung an dieses Mitglied übertragen">
                                        <MudIconButton Icon="@Icons.Material.Filled.AdminPanelSettings" Size="MudBlazor.Size.Small" OnClick="@(() => TransferOwnership(member))" />
                                    </MudTooltip>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="MudBlazor.Size.Small" OnClick="@(() => RemoveMember(member))" Class="ml-2" />
                                }
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>

            <MudText Class="mt-6 mb-2"><b>Neues Mitglied hinzufügen</b></MudText>
            <div class="d-flex">
                <MudAutocomplete T="User"
                                 Label="Benutzer auswählen"
                                 @bind-Value="userToAdd"
                                 SearchFunc="@SearchAvailableUsers"
                                 ToStringFunc="@(u => u?.UserName)"
                                 Variant="Variant.Outlined"
                                 Class="flex-grow-1" />
                <MudButton OnClick="AddMember" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(userToAdd is null)" Class="ml-2 align-self-center">Hinzufügen</MudButton>
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="Close">Schließen</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public int ProjectId { get; set; }

    private Project? project;
    private List<User> availableUsers = new();
    private User? userToAdd;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            project = await context.Projects
                .Include(p => p.ProjectUsers)
                .ThenInclude(pu => pu.User)
                .AsNoTracking()
                .FirstOrDefaultAsync(p => p.Id == ProjectId);

            var memberIds = project?.ProjectUsers.Select(pu => pu.UserId).ToList() ?? new List<string>();
            availableUsers = await context.Users
                .Where(u => !memberIds.Contains(u.Id)) // Nur User, die noch nicht im Projekt sind
                .OrderBy(u => u.UserName)
                .AsNoTracking()
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fehler beim Laden der Projektdaten.");
            Snackbar.Add("Laden der Mitglieder fehlgeschlagen.", Severity.Error);
        }
    }

    private async Task TransferOwnership(ProjectUser newOwner)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Möchtest du die Projektleitung wirklich an {newOwner.User.UserName} übertragen? Du kannst diese Aktion nicht rückgängig machen.");
        parameters.Add("ButtonText", "Übertragen");
        parameters.Add("Color", MudBlazor.Color.Error);

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Leitung übertragen bestätigen", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await using var context = await DbFactory.CreateDbContextAsync();
                var projectToUpdate = await context.Projects.FindAsync(ProjectId);
                if (projectToUpdate != null)
                {
                    projectToUpdate.OwnerId = newOwner.UserId;
                    await context.SaveChangesAsync();
                    Snackbar.Add($"Die Projektleitung wurde an {newOwner.User.UserName} übertragen.", Severity.Success);
                    await LoadDataAsync();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Fehler bei der Übertragung der Projektleitung.");
                Snackbar.Add("Die Projektleitung konnte nicht übertragen werden.", Severity.Error);
            }
        }
    }

    private async Task<IEnumerable<User>> SearchAvailableUsers(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value)) return availableUsers;
        return availableUsers.Where(u => u.UserName != null && u.UserName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task AddMember()
    {
        if (userToAdd is null || project is null) return;
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            var newMember = new ProjectUser { ProjectId = project.Id, UserId = userToAdd.Id, Role = ProjectUser.RoleMember };
            context.ProjectUsers.Add(newMember);
            await context.SaveChangesAsync();
            Snackbar.Add($"{userToAdd.UserName} wurde zum Projekt hinzugefügt.", Severity.Success);
            userToAdd = null;
            await LoadDataAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fehler beim Hinzufügen eines Mitglieds.");
            Snackbar.Add("Mitglied konnte nicht hinzugefügt werden.", Severity.Error);
        }
    }

    private async Task RemoveMember(ProjectUser memberToRemove)
    {
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            context.ProjectUsers.Remove(memberToRemove);
            await context.SaveChangesAsync();
            
            Snackbar.Add($"{memberToRemove.User.UserName} wurde aus dem Projekt entfernt.", Severity.Info);
            await LoadDataAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fehler beim Entfernen eines Mitglieds.");
            Snackbar.Add("Mitglied konnte nicht entfernt werden.", Severity.Error);
        }
    }

    private void Close() => MudDialog.Close();
}