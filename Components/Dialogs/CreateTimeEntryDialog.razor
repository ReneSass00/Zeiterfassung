@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Zeiterfassung.Data

@inject IDbContextFactory<ZeiterfassungContext> DbContextFactory
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@_dialogTitle</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="_success" Class="mt-4">
            <MudSelect T="int?" @bind-Value="_selectedProjectIdProxy"
                       Label="Projekt*"
                       Required="true"
                       Validation="@(new Func<int?, string?>(v => _projectId == 0 ? "Bitte ein Projekt auswählen." : null))">
                @foreach (var project in _userProjects)
                {
                    <MudSelectItem Value="@((int?)project.Id)">@project.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="_description" Label="Beschreibung" Lines="3" Class="mt-4" />

            <MudDatePicker Label="Startdatum" @bind-Date="_localStartDate" Class="mt-4" Required="true" />
            <MudTimePicker Label="Startzeit" @bind-Time="_localStartTime" Editable="true" Required="true" />

            <MudDatePicker Label="Enddatum" @bind-Date="_localEndDate" Class="mt-4" Required="true" />
            <MudTimePicker Label="Endzeit" @bind-Time="_localEndTime" Editable="true" Required="true" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary" Disabled="@(!_success)" OnClick="Submit">Speichern</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public TimeEntry? EntryToEdit { get; set; }
    [Parameter] public int? PreselectedProjectId { get; set; }
    [Parameter] public DateTime? PreselectedStartTime { get; set; }
    [Parameter] public DateTime? PreselectedEndTime { get; set; }
    [Parameter] public string? PreselectedDescription { get; set; }

    private MudForm? _form;
    private bool _success;
    private string _dialogTitle = "Neuer Zeiteintrag";

    private List<Project> _userProjects = new();
    private string? _userId;
    private int _projectId;

    private int? _selectedProjectIdProxy
    {
        get => _projectId == 0 ? null : _projectId;
        set => _projectId = value ?? 0;
    }
    private string? _description;

    private DateTime? _localStartDate;
    private TimeSpan? _localStartTime;
    private DateTime? _localEndDate;
    private TimeSpan? _localEndTime;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (_userId is not null)
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            _userProjects = await dbContext.Projects
                .Where(p => p.OwnerId == _userId || p.ProjectUsers.Any(tm => tm.UserId == _userId))
                .OrderBy(p => p.Name)
                .AsNoTracking()
                .ToListAsync();
        }


        // Edit-Mode
        if (EntryToEdit is not null)
        {
            _dialogTitle = "Zeiteintrag bearbeiten";
            _projectId = EntryToEdit.ProjectId;
            _description = EntryToEdit.Description;

            var localStart = EntryToEdit.StartTime.ToLocalTime();
            _localStartDate = localStart.Date;
            _localStartTime = localStart.TimeOfDay;

            var localEnd = EntryToEdit.EndTime.ToLocalTime();
            _localEndDate = localEnd.Date;
            _localEndTime = localEnd.TimeOfDay;
        }
        // Create-Mode
        else
        {
            _dialogTitle = "Zeiteintrag erstellen";
            _projectId = PreselectedProjectId ?? 0;
            _description = PreselectedDescription ?? string.Empty;

            var localStart = (PreselectedStartTime ?? DateTime.UtcNow).ToLocalTime();
            _localStartDate = localStart.Date;
            _localStartTime = localStart.TimeOfDay;

            var localEnd = (PreselectedEndTime ?? DateTime.UtcNow).ToLocalTime();
            _localEndDate = localEnd.Date;
            _localEndTime = localEnd.TimeOfDay;
        }
    }


    private async Task Submit()
    {
        await _form!.Validate();
        if (!_success)
        {
            Snackbar.Add("Bitte alle erforderlichen Felder ausfüllen.", Severity.Warning);
            return;
        }

        if (_localStartDate.HasValue && _localStartTime.HasValue && _localEndDate.HasValue && _localEndTime.HasValue)
        {
            DateTime combinedStart = _localStartDate.Value.Add(_localStartTime.Value);
            DateTime combinedEnd = _localEndDate.Value.Add(_localEndTime.Value);

            if (combinedEnd < combinedStart)
            {
                Snackbar.Add("Die Endzeit darf nicht vor der Startzeit liegen.", Severity.Error);
                return;
            }

            await using var dbContext = await DbContextFactory.CreateDbContextAsync();

            if (EntryToEdit is not null)
            {
                var entryFromDb = await dbContext.TimeEntries.FindAsync(EntryToEdit.Id);
                if (entryFromDb is null)
                {
                    Snackbar.Add("Fehler: Eintrag nicht gefunden.", Severity.Error);
                    return;
                }
                entryFromDb.ProjectId = _projectId;
                entryFromDb.Description = _description ?? string.Empty;
                entryFromDb.StartTime = combinedStart.ToUniversalTime();
                entryFromDb.EndTime = combinedEnd.ToUniversalTime();
                Snackbar.Add("Zeiteintrag erfolgreich aktualisiert.", Severity.Success);
            }
            else
            {
                var newEntry = new TimeEntry
                    {
                        UserId = _userId!,
                        ProjectId = _projectId,
                        Description = _description ?? string.Empty,
                        StartTime = combinedStart.ToUniversalTime(),
                        EndTime = combinedEnd.ToUniversalTime()
                    };
                await dbContext.TimeEntries.AddAsync(newEntry);
                Snackbar.Add("Zeiteintrag erfolgreich gespeichert.", Severity.Success);
            }

            await dbContext.SaveChangesAsync();
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}