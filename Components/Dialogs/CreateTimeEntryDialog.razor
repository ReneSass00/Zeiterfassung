@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Zeiterfassung.Data

@inject ZeiterfassungContext DbContext
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Neuen Zeiteintrag erstellen</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="_success" Class="mt-4">
            <MudSelect T="int" @bind-Value="_timeEntry.ProjectId" For="@(() => _timeEntry.ProjectId)" Label="Projekt" Required="true" RequiredError="Bitte ein Projekt auswählen.">
                @foreach (var project in _userProjects)
                {
                    <MudSelectItem Value="@project.Id">@project.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="_timeEntry.Description" For="@(() => _timeEntry.Description)" Label="Beschreibung" Lines="3" Class="mt-4" />
            <MudDatePicker @bind-Date="_startDate" Label="Startdatum" Required="true" Class="mt-4" />
            <MudTimePicker @bind-Time="_startTime" Label="Startzeit" Required="true" />
            <MudDatePicker @bind-Date="_endDate" Label="Enddatum" Required="true" Class="mt-4" />
            <MudTimePicker @bind-Time="_endTime" Label="Endzeit" Required="true" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Disabled="@(!_success)" OnClick="Submit">Speichern</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    // --- NEUE PARAMETER FÜR DEN TIMER ---
    [Parameter] public int? PreselectedProjectId { get; set; }
    [Parameter] public DateTime? PreselectedStartTime { get; set; }
    [Parameter] public DateTime? PreselectedEndTime { get; set; }
    // --- ENDE NEUE PARAMETER ---

    private MudForm? _form;
    private bool _success;

    private TimeEntry _timeEntry = new();
    private List<Project> _userProjects = new();
    private string? _userId;

    // Hilfsvariablen für die MudBlazor Date/Time Picker
    private DateTime? _startDate;
    private TimeSpan? _startTime;
    private DateTime? _endDate;
    private TimeSpan? _endTime;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (_userId is not null)
        {
            _userProjects = await DbContext.Projects
                .Where(p => p.OwnerId == _userId || p.ProjectUsers.Any(tm => tm.UserId == _userId))
                .OrderBy(p => p.Name)
                .AsNoTracking()
                .ToListAsync();
        }

        // --- NEUE LOGIK: VORAUSFÜLLEN DER DATEN ---
        // Wenn Daten vom Timer übergeben wurden, nutze sie.
        // Ansonsten nutze die Standardwerte (aktuelles Datum).
        _timeEntry.ProjectId = PreselectedProjectId ?? 0;

        var initialStartTime = PreselectedStartTime ?? DateTime.Now;
        var initialEndTime = PreselectedEndTime ?? DateTime.Now;

        _startDate = initialStartTime.Date;
        _startTime = initialStartTime.TimeOfDay;
        _endDate = initialEndTime.Date;
        _endTime = initialEndTime.TimeOfDay;
        // --- ENDE NEUE LOGIK ---
    }

    private async Task Submit()
    {
        await _form!.Validate();
        if (!_success)
        {
            Snackbar.Add("Bitte alle erforderlichen Felder ausfüllen.", Severity.Warning);
            return;
        }

        // Kombiniere Datum und Zeit
        if (_startDate.HasValue && _startTime.HasValue && _endDate.HasValue && _endTime.HasValue)
        {
            _timeEntry.StartTime = _startDate.Value.Add(_startTime.Value);
            _timeEntry.EndTime = _endDate.Value.Add(_endTime.Value);
            _timeEntry.UserId = _userId!;

            if (_timeEntry.Duration.TotalSeconds < 0)
            {
                Snackbar.Add("Die Endzeit darf nicht vor der Startzeit liegen.", Severity.Error);
                return;
            }

            await DbContext.TimeEntries.AddAsync(_timeEntry);
            await DbContext.SaveChangesAsync();
            Snackbar.Add("Zeiteintrag erfolgreich gespeichert.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Ungültiges Datum oder Uhrzeit.", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}