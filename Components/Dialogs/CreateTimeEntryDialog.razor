@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Zeiterfassung.Data

@inject IDbContextFactory<ZeiterfassungContext> DbContextFactory
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Zeiteintrag bearbeiten & speichern</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="_success" Class="mt-4">
            <MudSelect T="int" @bind-Value="_projectId" For="@(() => _projectId)" Label="Projekt" Required="true" RequiredError="Bitte ein Projekt auswählen.">
                @foreach (var project in _userProjects)
                {
                    <MudSelectItem Value="@project.Id">@project.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="_description" Label="Beschreibung" Lines="3" Class="mt-4" />

            @* KORREKTE BINDUNG: Separate Variablen für Datum und Zeit *@
            <MudDatePicker Label="Startdatum" @bind-Date="_localStartDate" Class="mt-4" />
            <MudTimePicker Label="Startzeit" @bind-Time="_localStartTime" />

            <MudDatePicker Label="Enddatum" @bind-Date="_localEndDate" Class="mt-4" />
            <MudTimePicker Label="Endzeit" @bind-Time="_localEndTime" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary" Disabled="@(!_success)" OnClick="Submit">Speichern</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public int? PreselectedProjectId { get; set; }
    [Parameter] public DateTime? PreselectedStartTime { get; set; } // Kommt in UTC an
    [Parameter] public DateTime? PreselectedEndTime { get; set; }   // Kommt in UTC an
    [Parameter] public string? PreselectedDescription { get; set; }

    private MudForm? _form;
    private bool _success;

    private List<Project> _userProjects = new();
    private string? _userId;

    private int _projectId;
    private string? _description;

    // KORREKTE VARIABLEN FÜR DIE UI-BINDUNG
    private DateTime? _localStartDate;
    private TimeSpan? _localStartTime;
    private DateTime? _localEndDate;
    private TimeSpan? _localEndTime;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        if (_userId is not null)
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            _userProjects = await dbContext.Projects
                .Where(p => p.OwnerId == _userId || p.ProjectUsers.Any(tm => tm.UserId == _userId))
                .OrderBy(p => p.Name)
                .AsNoTracking()
                .ToListAsync();
        }

        _projectId = PreselectedProjectId ?? 0;
        _description = PreselectedDescription ?? string.Empty;

        // KORREKTE INITIALISIERUNG: Konvertiere UTC und teile in Datum & Zeit auf
        var localStart = (PreselectedStartTime ?? DateTime.UtcNow).ToLocalTime();
        _localStartDate = localStart.Date;
        _localStartTime = localStart.TimeOfDay;

        var localEnd = (PreselectedEndTime ?? DateTime.UtcNow).ToLocalTime();
        _localEndDate = localEnd.Date;
        _localEndTime = localEnd.TimeOfDay;
    }

    private async Task Submit()
    {
        await _form!.Validate();
        if (!_success)
        {
            Snackbar.Add("Bitte alle erforderlichen Felder ausfüllen.", Severity.Warning);
            return;
        }

        if (_localStartDate.HasValue && _localStartTime.HasValue && _localEndDate.HasValue && _localEndTime.HasValue)
        {
            // KORREKTE ZUSAMMENFÜGUNG: Kombiniere Datum und Zeit aus den UI-Variablen
            DateTime combinedStart = _localStartDate.Value.Add(_localStartTime.Value);
            DateTime combinedEnd = _localEndDate.Value.Add(_localEndTime.Value);

            if (combinedEnd < combinedStart)
            {
                Snackbar.Add("Die Endzeit darf nicht vor der Startzeit liegen.", Severity.Error);
                return;
            }

            var newEntry = new TimeEntry
                {
                    UserId = _userId!,
                    ProjectId = _projectId,
                    Description = _description!,
                    // Konvertiere die kombinierte lokale Zeit zurück nach UTC für die Datenbank
                    StartTime = combinedStart.ToUniversalTime(),
                    EndTime = combinedEnd.ToUniversalTime()
                };

            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            await dbContext.TimeEntries.AddAsync(newEntry);
            await dbContext.SaveChangesAsync();

            Snackbar.Add("Zeiteintrag erfolgreich gespeichert.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Ungültiges Datum oder Uhrzeit.", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}