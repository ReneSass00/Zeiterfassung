@page "/Account/Login"
 

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Zeiterfassung.Data

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Anmelden</PageTitle>

<h1>Anmelden</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" Method="post" OnValidSubmit="LoginUser" FormName="login">
                <h4>Verwende einen lokalen Account zum Anmelden.</h4>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">E-Mail</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Password" type="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Passwort</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                        Angemeldet bleiben?
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Anmelden</button>
                </div>
            </EditForm>

            @* --- GAST-LOGIN-ABSCHNITT (ohne MudBlazor) --- *@
            <div class="divider text-center my-4">
                <span class="divider-text">Oder</span>
            </div>

            <button @onclick="LoginAsGuest" class="w-100 btn btn-lg btn-secondary">Als Gast mit Testdaten fortfahren</button>
            @* --- ENDE GAST-LOGIN --- *@

            <div class="d-flex flex-column align-items-center mt-3">
                <p>
                    <a href="Account/ForgotPassword">Passwort vergessen?</a>
                </p>
                <p>
                    <a href="Account/Register?ReturnUrl=@ReturnUrl">Als neuer Benutzer registrieren</a>
                </p>
            </div>
        </section>
    </div>
</div>

<style>
    .divider {
        display: flex;
        align-items: center;
        text-align: center;
    }

        .divider::before,
        .divider::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #ccc;
        }

    .divider-text {
        padding: 0 1em;
    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private async Task LoginAsGuest()
    {
        // Set the credentials for the guest user
        var guestEmail = "guest@example.com";
        var guestPassword = "GuestPassword123!";

        // Use password sign in to log in the guest user
        var result = await SignInManager.PasswordSignInAsync(guestEmail, guestPassword, isPersistent: false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("Guest user logged in.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/dashboard", forceLoad: true); // forceLoad to ensure a full refresh
        }
        else
        {
            errorMessage = "Fehler: Gast-Benutzer konnte nicht angemeldet werden. Wurde die Datenbank geseedet?";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}